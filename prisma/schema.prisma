generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Driver {
  DriverID         String                    @id @default(uuid())
  Name             String
  Email            String
  Phone            String
  LocationName     String
  Latitude         Float
  Longitude        Float
  Assignments      VehicleDriverAssignment[]
  Requests         AssignmentRequest[]
  AcceptedRequests RequestAssignment[]
}

model Vehicle {
  VehicleID   String                    @id @default(uuid())
  Company     String
  Model       String
  LicenseNo   String
  Assignments VehicleDriverAssignment[]
  Requests    AssignmentRequest[]
}

model VehicleDriverAssignment {
  AssignmentID      String              @id @default(uuid())
  Status            RequestStatus       @default(PENDING)
  DriverID          String
  Driver            Driver              @relation(fields: [DriverID], references: [DriverID])
  VehicleID         String
  Vehicle           Vehicle             @relation(fields: [VehicleID], references: [VehicleID])
  StartTime         DateTime
  EndTime           DateTime
  AssignmentRequest AssignmentRequest[]
  // @@unique([VehicleID, StartTime, EndTime], name: "unique_vehicle_assignment_timeframe")

  @@unique([DriverID, StartTime, EndTime], name: "unique_driver_assignment_timeframe")
}

model AssignmentRequest {
  RequestID        String                  @id @default(uuid())
  DriverID         String
  Driver           Driver                  @relation(fields: [DriverID], references: [DriverID])
  VehicleID        String
  Vehicle          Vehicle                 @relation(fields: [VehicleID], references: [VehicleID])
  AssignmentID     String
  Assignment       VehicleDriverAssignment @relation(fields: [AssignmentID], references: [AssignmentID])
  Status           RequestStatus           @default(PENDING)
  CreatedAt        DateTime                @default(now())
  UpdatedAt        DateTime                @updatedAt
  AcceptedRequests RequestAssignment[]
}

model RequestAssignment {
  RequestAssignmentID String            @id @default(uuid())
  RequestID           String
  AssignmentRequest   AssignmentRequest @relation(fields: [RequestID], references: [RequestID])
  DriverID            String
  Driver              Driver            @relation(fields: [DriverID], references: [DriverID])
  AcceptedAt          DateTime          @default(now())

  @@unique([RequestID, DriverID], name: "unique_request_driver")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  INVALID
}
